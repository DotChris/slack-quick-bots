{
  "name": "Slack-quick-bots",
  "tagline": "A slack bot solution for enterprise",
  "body": "# slack-quick-bots \r\n[![npm version][npm-badge]][npm-url]\r\n[![Build Status][travis-badge]][travis-url]\r\n\r\nSlack is awesome!! and this is slack bot solution for enterprise.\r\n\r\n## Why slack-quick-bots\r\n\r\nSTOP writing code for your bot, just pass your data to this module and rest is taken care.\r\n\r\nslack-quick-bots is another slack bot module to help create multiple bots with very minimal code.\r\n\r\nBasically, with `slack-quick-bots` running in a single machine you could run multiple bots all doing different operation or pulling data from different sources.\r\n\r\nSome of the salient features\r\n\r\n*  Pre-defined bot command behaviors with user preferred command name. Pre-defined command includes `data`, `recursive`, `alert` and predefined stop command.\r\n*  Seamlessly use multiple bot inside same channel. Just do @botname {command} or {botname}\r\n*  Auto generated contextual help/error messages, so just setup the bot and forget it.\r\n*  Configurable command param for great control.\r\n*  Block direct message to a bot and hence bot could only respond in a public channel, now you know who is using the bot (sounds simple but a killer feature).\r\n*  Log support. Simple console or winston like, your choice.\r\n*  exciting features to follow soon.\r\n\r\n## Getting Started\r\nInstall the module with: `npm install slack-quick-bots`\r\n\r\n## Step 1:\r\n\r\nGo to https://my.slack.com/services/new/bot - Create a bot with a cool name!! and don't forgot to \r\nmake a note of the bot token.\r\n\r\n## Step 2:\r\n\r\nDo `npm install slack-quick-bots` in your app. Set up the below `config` by defining your bots (You read it right, you can define `n` number of bot for different purpose with just this 3 steps) , commands and bind the data to your data source as a callback.\r\n\r\n## Step 3: \r\n\r\nTo get started immediately, try [sample.js](https://github.com/usubram/slack-quick-bots/blob/master/sample.js)\r\n\r\n```javascript\r\nvar SlackBot = require('slack-quick-bots');\r\nvar mybots = new SlackBot(config);\r\nmybots.start(); // 'awesome'\r\n```\r\n\r\n## Finally:\r\n\r\nPing the bot with your custom command or add the bot to the channel/group to watch the fun.\r\n\r\nPass few information in the `config` and is all you need for the bot. With the below config are running a bot with command,\r\n\r\n### DM to bot:\r\n\r\n* `traffic 2` bot will respond back `Total of 3000 visits in the last 2 mins` [sample.hbs].\r\n\r\n* `error 5` bot for every 5 mins will respond back with `10 errors in the last 5 mins`.\r\n\r\n* `stop error` will stop the recursive alerts.\r\n\r\n### Bot in channel/group:\r\n\r\nIf you add the bot to a channel, message had to appended with the bot name `{botname} ping 2`.\r\n\r\n```javascript\r\n{\r\n  bots: [{\r\n  botCommand: {\r\n    'traffic': {\r\n      commandType: 'DATA',\r\n      allowedParam: [],\r\n      lowerLimit: 1,\r\n      upperLimit: 5,\r\n      defaultParamValue: 5,\r\n      template: function() {\r\n        return handlebars.compile({sampleTemplate});\r\n      },\r\n      data: function(command, param, callback) {\r\n        callback({data: 'data fetched from service'});\r\n      }\r\n    },\r\n    'error': {\r\n      commandType: 'RECURSIVE',\r\n      lowerLimit: 1,\r\n      upperLimit: 5,\r\n      timeUnit: 'm',\r\n      defaultParamValue: 5,\r\n      template: function() {\r\n        return handlebars.compile(sampleTemplate);\r\n      },\r\n      data: function(command, param, callback) {\r\n        callback({data: 'data fetched from service'});\r\n      }\r\n    },\r\n    'alert': {\r\n      commandType: 'ALERT',\r\n      lowerLimit: 1,\r\n      upperLimit: 5,\r\n      timeUnit: 'm',\r\n      defaultParamValue: 5,\r\n      template: function() {\r\n        return handlebars.compile(sampleTemplate);\r\n      },\r\n      data: function(command, param, callback) {\r\n        callback({data: 'data fetched from service'});\r\n      }\r\n    }\r\n  },\r\n  botToken: ''\r\n  }]\r\n}\r\n```\r\n\r\n## Documentation\r\n_( More coming soon)_\r\n\r\n`bots` - Array to hold bots information.\r\n\r\n`botToken` - Holds the slack api bot token.\r\n\r\n`botCommand` - Object to hold all the fancy command that you would like. Object key is command,\r\nso no spaces, try to keep it short and nice for some to remember.\r\n\r\n`commandType` - Currently, only data, recursive commands are supported.\r\n\r\n  `Data` - Any data, but mind the limit size of the websocket.\r\n\r\n  `Recursive` - Have this command send your data recursive for a configurable time (minutes/hours)\r\n\r\n  `alert` - Have this command send your alert for a configurable time (minutes/hours) when the data has\r\n  a dip or a peak. This command basically takes a series of data and computes the variance between them and\r\n  alerts. Make sure to pass a even number of events.\r\n\r\n`timeUnit` - This attribute is for `Recursive` command. Currently, accepts, `h` for hours and `s` for minutes. Default - `m`.\r\n\r\n`template` - This take the *compiled* handlebars template for the data that you would be sending.\r\n\r\n`data` - This takes a callback with which the data will be given to the bot.\r\n\r\n`blockDirectMessage` - Block a bot from responding to a DM and hence only allowing it to respond in a public channel.\r\n\r\n\r\n## Examples\r\n_(Coming soon)_\r\n\r\n## Contributing\r\n_(Coming soon)_\r\n\r\n## Release History\r\n_(Nothing yet)_\r\n\r\n## License\r\nCopyright (c) 2016 Umashankar Subramanian  \r\nLicensed under the MIT license.\r\n\r\n[npm-badge]: https://badge.fury.io/js/slack-quick-bots.svg\r\n[npm-url]: https://badge.fury.io/js/slack-quick-bots\r\n[travis-badge]: https://api.travis-ci.org/usubram/slack-quick-bots.svg\r\n[travis-url]: https://travis-ci.org/usubram/slack-quick-bots",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}